{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","webpack:///./src/index.js?b635"],"names":["module","exports","tools","allowedClicks","Math","floor","random","App","useState","count","setCount","Error","className","src","logo","alt","map","t","key","onClick","Boolean","window","location","hostname","match","Sentry","dsn","bugsnagClient","bugsnag","use","bugsnagReact","React","ErrorBoundary","getPlugin","TrackJS","install","token","LogRocket","init","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wHAAAA,EAAOC,QAAU,IAA0B,kC,2LCIrCC,G,MAAQ,CACZ,SACA,UACA,SACA,UACA,WACA,cAGIC,EAAgBC,KAAKC,MAAM,GAAAD,KAAKE,SAAsB,GAgC7CC,MA9Bf,WAAgB,IAAD,EACaC,mBAAS,GADtB,mBACNC,EADM,KACCC,EADD,KAGb,GAAID,EAAQN,EACV,MAAM,IAAIQ,MAAJ,sCAAyCR,EAAzC,WAGR,OACE,yBAAKS,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,2BACGb,EAAMc,KAAI,SAACC,GAAD,OACT,0BAAMC,IAAKD,GAAIA,EAAf,SAIJ,4BAAQE,QAAS,kBAAMT,EAASD,EAAQ,KAAxC,UACA,iEACqC,8BAAON,GAD5C,8BAIA,6CACiB,8BAAOM,GADxB,cCzBYW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uECNNC,IAAY,CACVC,IACE,8EAIJ,IAAMC,EAAgBC,IAAQ,oCAC9BD,EAAcE,IAAIC,IAAcC,KAChC,IAAMC,EAAgBL,EAAcM,UAAU,SAG9CC,IAAQC,QAAQ,CACdC,MAAO,qCAITC,IAAUC,KAAK,gCAEfC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACT,EAAD,KACE,kBAAC,EAAD,QAGJU,SAASC,eAAe,SD+FpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fbb3a1f7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nconst tools = [\n  \"Sentry\",\n  \"Bugsnag\",\n  \"Raygun\",\n  \"TrackJS\",\n  \"Usersnap\",\n  \"LogRocket\",\n];\n\nconst allowedClicks = Math.floor(Math.random() * (10 - 0) + 0);\n\nfunction App() {\n  const [count, setCount] = useState(0);\n\n  if (count > allowedClicks) {\n    throw new Error(`Oops! You clicked more than ${allowedClicks} times`);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          {tools.map((t) => (\n            <code key={t}>{t} </code>\n          ))}\n        </p>\n\n        <button onClick={() => setCount(count + 1)}>Button</button>\n        <p>\n          If the button is clicked more than <code>{allowedClicks}</code> times\n          the app will crash.\n        </p>\n        <p>\n          Button clicked <code>{count}</code> times.\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport * as Sentry from \"@sentry/browser\";\nimport bugsnag from \"@bugsnag/js\";\nimport bugsnagReact from \"@bugsnag/plugin-react\";\nimport { TrackJS } from \"trackjs\";\nimport LogRocket from \"logrocket\";\n\n// Sentry setup\nSentry.init({\n  dsn:\n    \"https://cb13c6db4adc488ea0bc134a0b9fe13b@o375574.ingest.sentry.io/5195284\",\n});\n\n// Bugsnag Setup\nconst bugsnagClient = bugsnag(\"f2a9c768eba12eb27bfb6593f21bd9de\");\nbugsnagClient.use(bugsnagReact, React);\nconst ErrorBoundary = bugsnagClient.getPlugin(\"react\");\n\n// TrackJS\nTrackJS.install({\n  token: \"4b5d3f4e04d648f5a8c1c76c18bf73dc\",\n  // for more configuration options, see https://docs.trackjs.com\n});\n\nLogRocket.init(\"ykhrhn/error-reporting-spike\");\n\nReactDOM.render(\n  <React.StrictMode>\n    <ErrorBoundary>\n      <App />\n    </ErrorBoundary>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}